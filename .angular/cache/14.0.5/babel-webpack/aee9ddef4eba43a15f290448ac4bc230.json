{"ast":null,"code":"import _asyncToGenerator from \"/home/code237/Documents/GitHub/Projet1_Wds/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/questions.service\";\nexport class QUESTIONSComponent {\n  constructor(service) {\n    this.service = service; //Renvoie au la liste des types de question recuperes\n\n    this.questions_list = [];\n    /*(search) contient l'element texte temporaiement saisi dans la barre de recherche\n    qu'on utilise ainsi pour filtrer notre tableau de type de question */\n\n    this.search = \"\";\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.service.getAllQuestions().subscribe(data => {\n        _this.questions_list = data;\n      });\n    })();\n  }\n\n  setCurrentQuestion(question) {\n    this.current_question = question;\n  }\n\n  deleteQuestion(id) {\n    this.service.deleteQuestion(Number(id)).subscribe(data => {\n      console.log(data);\n      this.ngOnInit();\n    });\n  }\n\n  addQuestion() {\n    const question = {\n      idtype: this.idtype_new_question,\n      intitule: this.intitule_new_question,\n      ordre: this.ordre_new_question,\n      type: this.type_new_question,\n      obligatoire: this.obligatoire_new_question == true ? 1 : 0,\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n    this.service.postQuestion(question).subscribe(data => {\n      console.log(data);\n    });\n  }\n\n}\n\nQUESTIONSComponent.ɵfac = function QUESTIONSComponent_Factory(t) {\n  return new (t || QUESTIONSComponent)(i0.ɵɵdirectiveInject(i1.QuestionsService));\n};\n\nQUESTIONSComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: QUESTIONSComponent,\n  selectors: [[\"app-questions\"]],\n  decls: 2,\n  vars: 0,\n  template: function QUESTIONSComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"questions works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJxdWVzdGlvbnMuY29tcG9uZW50LnNjc3MifQ== */\"]\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,kBAAP,CAAyB;EAE7BC,YAAoBC,OAApB,EAA4C;IAAxB,uBAAwB,CAS3C;;IACA,sBAA6B,EAA7B;IAOA;;;IAEA,cAAgB,EAAhB;EAnBgD;;EAqB5CC,QAAQ;IAAA;;IAAA;MACb,MAAM,KAAI,CAACD,OAAL,CAAaE,eAAb,GAA+BC,SAA/B,CACJC,IAAI,IAAE;QACJ,KAAI,CAACC,cAAL,GAAsBD,IAAtB;MACD,CAHG,CAAN;IADa;EAMZ;;EAEDE,kBAAkB,CAACC,QAAD,EAAmB;IACnC,KAAKC,gBAAL,GAAwBD,QAAxB;EACD;;EACDE,cAAc,CAACC,EAAD,EAAO;IACnB,KAAKV,OAAL,CAAaS,cAAb,CAA4BE,MAAM,CAACD,EAAD,CAAlC,EAAwCP,SAAxC,CACEC,IAAI,IAAE;MACJQ,OAAO,CAACC,GAAR,CAAYT,IAAZ;MACA,KAAKH,QAAL;IACD,CAJH;EAMD;;EACDa,WAAW;IACT,MAAMP,QAAQ,GAAc;MAC1BQ,MAAM,EAAC,KAAKC,mBADc;MAE1BC,QAAQ,EAAC,KAAKC,qBAFY;MAG1BC,KAAK,EAAC,KAAKC,kBAHe;MAI1BC,IAAI,EAAC,KAAKC,iBAJgB;MAK1BC,WAAW,EAAC,KAAKC,wBAAL,IAA+B,IAA/B,GAAoC,CAApC,GAAsC,CALxB;MAM1BC,UAAU,EAAC,IAAIC,IAAJ,EANe;MAO1BC,UAAU,EAAC,IAAID,IAAJ;IAPe,CAA5B;IASA,KAAK1B,OAAL,CAAa4B,YAAb,CAA0BrB,QAA1B,EAAoCJ,SAApC,CACEC,IAAI,IAAE;MACJQ,OAAO,CAACC,GAAR,CAAYT,IAAZ;IACD,CAHH;EAKD;;AAzD4B;;;mBAAlBN,oBAAkB+B;AAAA;;;QAAlB/B;EAAkBgC;EAAAC;EAAAC;EAAAC;IAAA;MCT/BJ;MAAGA;MAAgBA","names":["QUESTIONSComponent","constructor","service","ngOnInit","getAllQuestions","subscribe","data","questions_list","setCurrentQuestion","question","current_question","deleteQuestion","id","Number","console","log","addQuestion","idtype","idtype_new_question","intitule","intitule_new_question","ordre","ordre_new_question","type","type_new_question","obligatoire","obligatoire_new_question","created_at","Date","updated_at","postQuestion","i0","selectors","decls","vars","template"],"sourceRoot":"","sources":["/home/code237/Documents/GitHub/Projet1_Wds/src/app/components/QUESTIONS/questions.component.ts","/home/code237/Documents/GitHub/Projet1_Wds/src/app/components/QUESTIONS/questions.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport IQuestion from 'src/app/models/question.models';\nimport { QuestionsService } from 'src/app/services/questions.service';\n\n@Component({\n  selector: 'app-questions',\n  templateUrl: './questions.component.html',\n  styleUrls: ['./questions.component.scss']\n})\nexport class QUESTIONSComponent implements OnInit {\n\n  constructor(private service:QuestionsService) { }\n   //Renvoie a l'intitule entre par l'utilisateur lors de la modification d'un type de question\n   update_intitule?:string;\n   update_type?:string;\n   update_idtype?:number;\n   update_ordre?:number;\n   update_obligatoire?:boolean;\n   /*renvoie ici au type de question selectionne */ \n   current_question?:IQuestion;\n   //Renvoie au la liste des types de question recuperes\n   questions_list:IQuestion[] = [];\n   //stocke l'intitule du type de question que veux creer/ajouter l'admin \n   intitule_new_question?:string;\n   type_new_question?:string;\n   idtype_new_question?:number;\n   ordre_new_question?:number;\n   obligatoire_new_question?:boolean;\n   /*(search) contient l'element texte temporaiement saisi dans la barre de recherche \n   qu'on utilise ainsi pour filtrer notre tableau de type de question */\n   search:string = \"\";\n \n async ngOnInit(){\n  await this.service.getAllQuestions().subscribe(\n    data=>{\n      this.questions_list = data;\n    }\n  )\n  }\n\n  setCurrentQuestion(question:IQuestion){\n    this.current_question = question;\n  }\n  deleteQuestion(id:any){\n    this.service.deleteQuestion(Number(id)).subscribe(\n      data=>{\n        console.log(data);\n        this.ngOnInit();\n      }\n    )\n  }\n  addQuestion(){\n    const question :IQuestion = {\n      idtype:this.idtype_new_question!,\n      intitule:this.intitule_new_question!,\n      ordre:this.ordre_new_question!,\n      type:this.type_new_question!,\n      obligatoire:this.obligatoire_new_question==true?1:0,\n      created_at:new Date(),\n      updated_at:new Date(),\n    }\n    this.service.postQuestion(question).subscribe(\n      data=>{\n        console.log(data);\n      }\n    )\n  }\n\n}\n","<p>questions works!</p>\n"]},"metadata":{},"sourceType":"module"}