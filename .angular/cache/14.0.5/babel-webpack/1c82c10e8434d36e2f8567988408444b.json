{"ast":null,"code":"import _asyncToGenerator from \"/home/code237/Documents/GitHub/Projet1_Wds/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet HabitationsComponent = class HabitationsComponent {\n  constructor(service) {\n    this.service = service;\n    /*habitations_list ici renvoie a un tableau contenant la liste de toutes les habitations*/\n\n    this.habitations_list = [];\n    /*lorsque l'admin voudra ajouter une nouvelle habitation , l'intitule de cette\n    derniere se stockera temporairement dans la variable (intitule_new_habitation)*/\n\n    this.intitule_new_habitation = \"\";\n    /*(search) contient l'element texte temporaiement saisi dans la barre de recherche\n    qu'on utilise ainsi pour filtrer notre tableau d'habitations */\n\n    this.search = \"\";\n    /*tableau contenant la liste des ID des habitations liees a l'habitation actuellement selectionne*/\n\n    this.linked_current_habitations = [];\n  }\n  /**/\n\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      /*A l'initialisation de notre composants , on recupere toutes les habitations*/\n      yield _this.service.getAllHabitations().subscribe(data => {\n        /*Et on les stocke dans notre variable (habitations_list)*/\n        _this.habitations_list = data;\n      });\n    })();\n  }\n  /**/\n\n\n  changelinkhabitation(event) {\n    this.id_link_habitation = event.target.value;\n    this.lier = true ? this.linked_current_habitations.indexOf(Number(event.target.value)) == -1 : this.lier = false;\n    console.log(this.linked_current_habitations.indexOf(event.target.value));\n    console.log(event.target.value);\n  }\n  /*Cette methode permet de recuperer l'habitation acutellement selectionner\n  afin d'y appliquer des modification*/\n\n\n  setCurrentHabitation(habitation) {\n    this.current_habitation = habitation;\n  }\n  /*Cette methode permet de supprimer une habitation*/\n\n\n  deleteHabitation(id) {\n    this.service.deleteHabitation(id).subscribe(data => {\n      console.log(\"Habitation supprime avec success\");\n      this.ngOnInit();\n    });\n  }\n  /*Cette methode permet d'ajouter une nouvelle habitation*/\n\n\n  addHabitation() {\n    /*Nous creons temporairement une habitation a base des informations entrees par l'admin\n    afin de l'ajouter comme parametre dans notre fonction*/\n    const new_habitation = {\n      intitule: String(this.intitule_new_habitation.toString()),\n      created_at: new Date(),\n      updated_at: new Date()\n    };\n    console.log(this.new_habitation);\n    this.service.addHabitation(new_habitation).subscribe(data => {\n      console.log(data);\n      console.log(\"Habitation ajoute avec success\");\n      this.ngOnInit();\n    });\n  }\n\n  new_habitation(new_habitation) {\n    throw new Error('Method not implemented.');\n  }\n  /*Cette methode permet de modifier une habitation*/\n\n\n  updateHabitation() {\n    const updateHabitation = {\n      id: this.current_habitation?.id,\n      intitule: String(this.update_intitule?.toString()),\n\n      /*A chaque modification de notre habitation , la date de modification change imperativement\n        mais par contre la date de modification est celle recupere par le systeme*/\n      updated_at: new Date()\n    };\n    this.service.updateHabitation(updateHabitation).subscribe(data => {\n      console.log(\"Habitation modifiee avec success\");\n      this.ngOnInit();\n    });\n  }\n  /** */\n\n\n  linkHabitation() {\n    this.service.linkHabitation(this.id_link_habitation, this.current_habitation?.id).subscribe(data => {\n      console.log(data);\n    });\n    console.log(`L'habitation ${this.id_link_habitation} viens d'etre liee a :  ${this.current_habitation?.intitule}`);\n  }\n\n  getLinkedHabitation(id) {\n    var _this2 = this;\n\n    this.service.listLinkHabitations(id).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (data) {\n        console.log(data);\n        /*Dans ce cas , nous chargons notre tableau d'Id (linked_current_habitations) avec\n         les id des differentes habitations liees a celle selectionnee recuperes*/\n\n        yield data.forEach(dict => {\n          _this2.linked_current_habitations.push(Number(dict.id));\n        });\n        console.log(_this2.linked_current_habitations);\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n};\nHabitationsComponent = __decorate([Component({\n  selector: 'app-habitations',\n  templateUrl: './habitations.component.html',\n  styleUrls: ['./habitations.component.scss']\n})], HabitationsComponent);\nexport { HabitationsComponent };","map":{"version":3,"mappings":"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","names":["Component","HabitationsComponent","constructor","service","ngOnInit","getAllHabitations","subscribe","data","habitations_list","changelinkhabitation","event","id_link_habitation","target","value","lier","linked_current_habitations","indexOf","Number","console","log","setCurrentHabitation","habitation","current_habitation","deleteHabitation","id","addHabitation","new_habitation","intitule","String","intitule_new_habitation","toString","created_at","Date","updated_at","Error","updateHabitation","update_intitule","linkHabitation","getLinkedHabitation","listLinkHabitations","forEach","dict","push","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/code237/Documents/GitHub/Projet1_Wds/src/app/components/HABITATION/habitations/habitations.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport IHabitation from 'src/app/models/habitation.models';\nimport { HabitationsService } from 'src/app/services/habitations.service';\n\n@Component({\n  selector: 'app-habitations',\n  templateUrl: './habitations.component.html',\n  styleUrls: ['./habitations.component.scss']\n})\nexport class HabitationsComponent implements OnInit {\n\n  constructor(private service:HabitationsService) { }\n  update_intitule?: string;\n  /*Current_habitation ici renvoie a l'habitation selectionnee\n  a la quelle l'admin veux appliquer les modifications*/\n  current_habitation?:IHabitation;\n  /*habitations_list ici renvoie a un tableau contenant la liste de toutes les habitations*/\n  habitations_list:IHabitation[]=[];\n  /*lorsque l'admin voudra ajouter une nouvelle habitation , l'intitule de cette \n  derniere se stockera temporairement dans la variable (intitule_new_habitation)*/\n  intitule_new_habitation:String =\"\";\n  /* contient l'id de l'habitation qu'on veux lier*/ \n  id_link_habitation?:number;\n  /*(search) contient l'element texte temporaiement saisi dans la barre de recherche \n  qu'on utilise ainsi pour filtrer notre tableau d'habitations */\n  search:string = \"\";\n  lier?:boolean;\n  /*tableau contenant la liste des ID des habitations liees a l'habitation actuellement selectionne*/\n  linked_current_habitations:number[]=[];\n  /**/\n  async ngOnInit(){\n    /*A l'initialisation de notre composants , on recupere toutes les habitations*/\n    await this.service.getAllHabitations().subscribe(data=>{\n      /*Et on les stocke dans notre variable (habitations_list)*/\n      this.habitations_list = data;\n    })\n\n  }\n   /**/\n   changelinkhabitation(event:any){\n    this.id_link_habitation = event.target.value;\n    this.lier = true ? this.linked_current_habitations.indexOf(Number(event.target.value)) ==-1 : this.lier=false;\n    console.log(this.linked_current_habitations.indexOf( event.target.value ))\n    console.log(event.target.value);\n  }\n  /*Cette methode permet de recuperer l'habitation acutellement selectionner \n  afin d'y appliquer des modification*/ \n  setCurrentHabitation(habitation:IHabitation){\n    this.current_habitation = habitation;\n  }\n  /*Cette methode permet de supprimer une habitation*/\n  deleteHabitation(id:any):void{\n  this.service.deleteHabitation(id).subscribe(data=>{\n   console.log(\"Habitation supprime avec success\");\n   this.ngOnInit();\n  });\n  }\n  /*Cette methode permet d'ajouter une nouvelle habitation*/\n  addHabitation():void{\n    /*Nous creons temporairement une habitation a base des informations entrees par l'admin \n    afin de l'ajouter comme parametre dans notre fonction*/\n    const new_habitation:IHabitation = {\n      intitule:String(this.intitule_new_habitation.toString()),\n      created_at:new Date(),\n      updated_at:new Date()}\n\n    console.log(this.new_habitation)\n    this.service.addHabitation(new_habitation!).subscribe(data=>{\n      console.log(data);\n      console.log(\"Habitation ajoute avec success\");\n      this.ngOnInit();\n    })\n    \n  }\n  new_habitation(new_habitation: any) {\n    throw new Error('Method not implemented.');\n  }\n  /*Cette methode permet de modifier une habitation*/\n  updateHabitation(){\n    const updateHabitation:IHabitation = {\n      id:this.current_habitation?.id,\n      intitule:String(this.update_intitule?.toString()),\n      /*A chaque modification de notre habitation , la date de modification change imperativement \n        mais par contre la date de modification est celle recupere par le systeme*/\n      updated_at:new Date()\n    }\n    this.service.updateHabitation(updateHabitation).subscribe(data=>{\n      console.log(\"Habitation modifiee avec success\");\n      this.ngOnInit();\n    });\n  }\n \n  /** */\n  linkHabitation():void{\n    this.service.linkHabitation(this.id_link_habitation!,this.current_habitation?.id!).subscribe(\n      data=>{\n        console.log(data);\n      }\n    )\n   console.log(`L'habitation ${this.id_link_habitation} viens d'etre liee a :  ${this.current_habitation?.intitule}`)\n  }\n getLinkedHabitation(id:number)\n  {\n    this.service.listLinkHabitations(id).subscribe(\n      async data=>{\n        console.log(data);\n        /*Dans ce cas , nous chargons notre tableau d'Id (linked_current_habitations) avec\n         les id des differentes habitations liees a celle selectionnee recuperes*/\n       await data.forEach((dict:any)=>{\n          this.linked_current_habitations.push(Number(dict.id));\n        })\n\n        console.log(this.linked_current_habitations)\n      }\n    )  \n  }\n}\n"]},"metadata":{},"sourceType":"module"}